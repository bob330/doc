<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kernel on FreeBSD Documentation Portal</title><link>http://172.16.201.134:1313/pt-br/tags/kernel/</link><description>Recent content in Kernel on FreeBSD Documentation Portal</description><generator>Hugo</generator><language>pt-br</language><copyright>BSD 2-clause 'Simplified' License</copyright><atom:link href="http://172.16.201.134:1313/pt-br/tags/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Emulação do Linux® no FreeBSD</title><link>http://172.16.201.134:1313/pt-br/articles/linux-emulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/pt-br/articles/linux-emulation/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Resumo&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Esta tese de mestrado trata da atualização da camada de emulação do Linux® (chamada de &lt;em>Linuxulator&lt;/em>). A tarefa consistiu em atualizar a camada para corresponder à funcionalidade do Linux® 2.6. Como implementação de referência, foi escolhido o kernel Linux® 2.6.16. O conceito é vagamente baseado na implementação do NetBSD. A maior parte do trabalho foi realizada no verão de 2006 como parte do programa de estudantes do Google Summer of Code. O foco foi trazer o suporte do &lt;em>NPTL&lt;/em> (nova biblioteca de threads POSIX®) para a camada de emulação, incluindo &lt;em>TLS&lt;/em> (armazenamento local de threads), &lt;em>futexes&lt;/em> (mutexes de espaço do usuário rápidos), &lt;em>PID mangling&lt;/em> e algumas outras pequenas coisas. Muitos problemas pequenos foram identificados e corrigidos durante o processo. Meu trabalho foi integrado ao repositório principal do FreeBSD e será incluído na próxima versão 7.0R. Nós, a equipe de desenvolvimento de emulação, estamos trabalhando para tornar a emulação do Linux® 2.6 a camada de emulação padrão no FreeBSD.&lt;/p>
&lt;/div></description></item><item><title>Escrevendo uma classe GEOM</title><link>http://172.16.201.134:1313/pt-br/articles/geom-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/pt-br/articles/geom-class/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Resumo&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Este texto documenta alguns pontos de partida no desenvolvimento de classes GEOM e módulos de kernel em geral. Pressupõe-se que o leitor esteja familiarizado com a programação de espaço de usuário em C.&lt;/p>
&lt;/div>
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="intro">1. Introdução&lt;a class="anchor" href="#intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="sect2">
&lt;h3 id="intro-docs">1.1. Documentação&lt;a class="anchor" href="#intro-docs">&lt;/a>&lt;/h3>
&lt;div class="paragraph">
&lt;p>A documentação sobre programação de kernel é escassa - é uma das poucas áreas em que quase não há tutoriais amigáveis, e a frase &amp;#34;use o código fonte!&amp;#34; realmente é verdadeira. No entanto, existem alguns fragmentos (alguns deles seriamente desatualizados) circulando que devem ser estudados antes de começar a codificar:&lt;/p>
&lt;/div></description></item></channel></rss>