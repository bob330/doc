<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Filesystem on FreeBSD Documentation Portal</title><link>https://docs.freebsd.org/en/tags/filesystem/</link><description>Recent content in Filesystem on FreeBSD Documentation Portal</description><generator>Hugo</generator><language>en</language><copyright>BSD 2-clause 'Simplified' License</copyright><atom:link href="https://docs.freebsd.org/en/tags/filesystem/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 22. The Z File System (ZFS)</title><link>https://docs.freebsd.org/en/books/handbook/zfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.freebsd.org/en/books/handbook/zfs/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>ZFS is an advanced file system designed to solve major problems found in previous storage subsystem software.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Originally developed at Sunâ„¢, ongoing open source ZFS development has moved to the &lt;a href="http://open-zfs.org">OpenZFS Project&lt;/a>.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>ZFS has three major design goals:&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>Data integrity: All data includes a &lt;a href="../zfs/#zfs-term-checksum">checksum&lt;/a> of the data. ZFS calculates checksums and writes them along with the data. When reading that data later, ZFS recalculates the checksums. If the checksums do not match, meaning detecting one or more data errors, ZFS will attempt to automatically correct errors when ditto-, mirror-, or parity-blocks are available.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pooled storage: adding physical storage devices to a pool, and allocating storage space from that shared pool. Space is available to all file systems and volumes, and increases by adding new storage devices to the pool.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Performance: caching mechanisms provide increased performance.
&lt;a href="../zfs/#zfs-term-arc">ARC&lt;/a> is an advanced memory-based read cache. ZFS
provides a second level disk-based read cache with
&lt;a href="../zfs/#zfs-term-l2arc">L2ARC&lt;/a>, and a disk-based synchronous write cache
named &lt;a href="../zfs/#zfs-term-zil">ZIL&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Chapter 23. Other File Systems</title><link>https://docs.freebsd.org/en/books/handbook/filesystems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.freebsd.org/en/books/handbook/filesystems/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="filesystems-synopsis">23.1. Synopsis&lt;a class="anchor" href="#filesystems-synopsis">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>File systems are an integral part of any operating system.
They allow users to upload and store files, provide access to data, and make hard drives useful.
Different operating systems differ in their native file system.
Traditionally, the native FreeBSD file system has been the Unix File System UFS which has been modernized as UFS2.
Since FreeBSD 7.0, the Z File System (ZFS) is also available as a native file system.
See &lt;a href="../zfs/#zfs">The Z File System (ZFS)&lt;/a> for more information.&lt;/p>
&lt;/div></description></item></channel></rss>