<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design on FreeBSD Documentation Portal</title><link>http://172.16.201.134:1313/en/tags/Design/</link><description>Recent content in Design on FreeBSD Documentation Portal</description><generator>Hugo</generator><language>en</language><copyright>BSD 2-clause 'Simplified' License</copyright><atom:link href="http://172.16.201.134:1313/en/tags/Design/index.xml" rel="self" type="application/rss+xml"/><item><title>Design elements of the FreeBSD VM system</title><link>http://172.16.201.134:1313/en/articles/vm-design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/vm-design/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Matthew Dillon &amp;lt;&lt;a href="mailto:dillon@apollo.backplane.com">dillon@apollo.backplane.com&lt;/a>&amp;gt;&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>The title is really just a fancy way of saying that I am going to attempt to describe the whole VM enchilada, hopefully in a way that everyone can follow.
For the last year I have concentrated on a number of major kernel subsystems within FreeBSD, with the VM and Swap subsystems being the most interesting and NFS being &amp;#34;a necessary chore&amp;#34;.
I rewrote only small portions of the code. In the VM arena the only major rewrite I have done is to the swap subsystem.
Most of my work was cleanup and maintenance, with only moderate code rewriting and no major algorithmic adjustments within the VM subsystem.
The bulk of the VM subsystemâ€™s theoretical base remains unchanged and a lot of the credit for the modernization effort in the last few years belongs to John Dyson and David Greenman.
Not being a historian like Kirk I will not attempt to tag all the various features with peoples names, since I will invariably get it wrong.&lt;/p>
&lt;/div></description></item><item><title>The Design and Implementation of the 4.4BSD Operating System</title><link>http://172.16.201.134:1313/en/books/design-44bsd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/design-44bsd/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="overview">2.1. Design Overview of 4.4BSD&lt;a class="anchor" href="#overview">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="sect2">
&lt;h3 id="overview-facilities">2.1.1. 4.4BSD Facilities and the Kernel&lt;a class="anchor" href="#overview-facilities">&lt;/a>&lt;/h3>
&lt;div class="paragraph">
&lt;p>The 4.4BSD kernel provides four basic facilities: processes, a filesystem, communications, and system startup.
This section outlines where each of these four basic services is described in this book.&lt;/p>
&lt;/div>
&lt;div class="olist arabic">
&lt;ol class="arabic">
&lt;li>
&lt;p>Processes constitute a thread of control in an address space. Mechanisms for creating, terminating, and otherwise controlling processes are described in Chapter 4. The system multiplexes separate virtual-address spaces for each process; this memory management is discussed in Chapter 5.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The user interface to the filesystem and devices is similar; common aspects are discussed in Chapter 6. The filesystem is a set of named files, organized in a tree-structured hierarchy of directories, and of operations to manipulate them, as presented in Chapter 7. Files reside on physical media such as disks. 4.4BSD supports several organizations of data on the disk, as set forth in Chapter 8. Access to files on remote machines is the subject of Chapter 9. Terminals are used to access the system; their operation is the subject of Chapter 10.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Communication mechanisms provided by traditional UNIX systems include simplex reliable byte streams between related processes (see pipes, Section 11.1), and notification of exceptional events (see signals, Section 4.7). 4.4BSD also has a general interprocess-communication facility. This facility, described in Chapter 11, uses access mechanisms distinct from those of the filesystem, but, once a connection is set up, a process can access it as though it were a pipe. There is a general networking framework, discussed in Chapter 12, that is normally used as a layer underlying the IPC facility. Chapter 13 describes a particular networking implementation in detail.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Any real operating system has operational issues, such as how to start it running. Startup and operational issues are described in Chapter 14.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description></item></channel></rss>