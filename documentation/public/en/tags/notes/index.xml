<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on FreeBSD Documentation Portal</title><link>http://172.16.201.134:1313/en/tags/notes/</link><description>Recent content in Notes on FreeBSD Documentation Portal</description><generator>Hugo</generator><language>en</language><copyright>BSD 2-clause 'Simplified' License</copyright><atom:link href="http://172.16.201.134:1313/en/tags/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 2. Locking Notes</title><link>http://172.16.201.134:1313/en/books/arch-handbook/locking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/arch-handbook/locking/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>&lt;em>This chapter is maintained by the FreeBSD SMP Next Generation Project.&lt;/em>&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This document outlines the locking used in the FreeBSD kernel to permit effective multi-processing within the kernel. Locking can be achieved via several means. Data structures can be protected by mutexes or &lt;a href="https://man.freebsd.org/cgi/man.cgi?query=lockmgr&amp;amp;sektion=9&amp;amp;format=html">lockmgr(9)&lt;/a> locks. A few variables are protected simply by always using atomic operations to access them.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="locking-mutexes">2.1. Mutexes&lt;a class="anchor" href="#locking-mutexes">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>A mutex is simply a lock used to guarantee mutual exclusion. Specifically, a mutex may only be owned by one entity at a time. If another entity wishes to obtain a mutex that is already owned, it must wait until the mutex is released. In the FreeBSD kernel, mutexes are owned by processes.&lt;/p>
&lt;/div></description></item></channel></rss>