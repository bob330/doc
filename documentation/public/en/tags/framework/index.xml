<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Framework on FreeBSD Documentation Portal</title><link>http://172.16.201.134:1313/en/tags/framework/</link><description>Recent content in Framework on FreeBSD Documentation Portal</description><generator>Hugo</generator><language>en</language><copyright>BSD 2-clause 'Simplified' License</copyright><atom:link href="http://172.16.201.134:1313/en/tags/framework/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 5. The SYSINIT Framework</title><link>http://172.16.201.134:1313/en/books/arch-handbook/sysinit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/arch-handbook/sysinit/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>SYSINIT is the framework for a generic call sort and dispatch mechanism. FreeBSD currently uses it for the dynamic initialization of the kernel. SYSINIT allows FreeBSD’s kernel subsystems to be reordered, and added, removed, and replaced at kernel link time when the kernel or one of its modules is loaded without having to edit a statically ordered initialization routing and recompile the kernel. This system also allows kernel modules, currently called &lt;em>KLD’s&lt;/em>, to be separately compiled, linked, and initialized at boot time and loaded even later while the system is already running. This is accomplished using the &amp;#34;kernel linker&amp;#34; and &amp;#34;linker sets&amp;#34;.&lt;/p>
&lt;/div></description></item></channel></rss>