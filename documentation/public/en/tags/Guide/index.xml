<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Guide on FreeBSD Documentation Portal</title><link>http://172.16.201.134:1313/en/tags/Guide/</link><description>Recent content in Guide on FreeBSD Documentation Portal</description><generator>Hugo</generator><language>en</language><copyright>BSD 2-clause 'Simplified' License</copyright><atom:link href="http://172.16.201.134:1313/en/tags/Guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 3. Quick Porting</title><link>http://172.16.201.134:1313/en/books/porters-handbook/quick-porting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/porters-handbook/quick-porting/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>This section describes how to quickly create a new port.
For applications where this quick method is not adequate, the full &amp;#34;Slow Porting&amp;#34; process is described in &lt;a href="../slow-porting/#slow-porting">Slow Porting&lt;/a>.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>First, get the original tarball and put it into &lt;code>DISTDIR&lt;/code>, which defaults to &lt;span class="filename">/usr/ports/distfiles&lt;/span>.&lt;/p>
&lt;/div>
&lt;div class="admonitionblock note">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-note" title="Note">&lt;/i>
&lt;/td>
&lt;td class="content">
&lt;div class="paragraph">
&lt;p>These steps assume that the software compiled out-of-the-box.
In other words, absolutely no changes were required for the application to work on a FreeBSD system.
If anything had to be changed, refer to &lt;a href="../slow-porting/#slow-porting">Slow Porting&lt;/a>.&lt;/p>
&lt;/div></description></item><item><title>Chapter 2. Installing FreeBSD</title><link>http://172.16.201.134:1313/en/books/handbook/bsdinstall/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/handbook/bsdinstall/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="bsdinstall-synopsis">2.1. Synopsis&lt;a class="anchor" href="#bsdinstall-synopsis">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>FreeBSD supports different architectures including amd64, ARM®, RISC-V®, and PowerPC®.
Depending on the architecture and platform, different images can be &lt;a href="https://www.freebsd.org/where/">downloaded&lt;/a> to install or directly run FreeBSD.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>The image types are:&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>Virtual Machine disk images, such as &lt;code>qcow2&lt;/code>, &lt;code>vmdk&lt;/code>, &lt;code>vhd&lt;/code>, and raw device images. These are not installation images, but images that have FreeBSD preinstalled and ready for post-installation tasks. Virtual machine images are also commonly used in cloud environments.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SD card images, for embedded systems such as Raspberry Pi. These files must be uncompressed and written as a raw image to an SD card, from which the board will boot.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Installation images to boot from an ISO or USB device to install FreeBSD on a drive for the usual desktop, laptop, or server system.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Chapter 3. Kernel Objects</title><link>http://172.16.201.134:1313/en/books/arch-handbook/kobj/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/arch-handbook/kobj/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>Kernel Objects, or &lt;em>Kobj&lt;/em> provides an object-oriented C programming system for the kernel.
As such the data being operated on carries the description of how to operate on it.
This allows operations to be added and removed from an interface at run time and without breaking binary compatibility.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="kernel-objects-term">3.1. Terminology&lt;a class="anchor" href="#kernel-objects-term">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="dlist">
&lt;dl>
&lt;dt class="hdlist1">Object&lt;/dt>
&lt;dd>
&lt;p>A set of data - data structure - data allocation.&lt;/p>
&lt;/dd>
&lt;dt class="hdlist1">Method&lt;/dt>
&lt;dd>
&lt;p>An operation - function.&lt;/p>
&lt;/dd>
&lt;dt class="hdlist1">Class&lt;/dt>
&lt;dd>
&lt;p>One or more methods.&lt;/p>
&lt;/dd>
&lt;dt class="hdlist1">Interface&lt;/dt>
&lt;dd>
&lt;p>A standard set of one or more methods.&lt;/p>
&lt;/dd>
&lt;/dl>
&lt;/div></description></item><item><title>Chapter 4. Slow Porting</title><link>http://172.16.201.134:1313/en/books/porters-handbook/slow-porting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/porters-handbook/slow-porting/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>Okay, so it was not that simple, and the port required some modifications to get it to work.
In this section, we will explain, step by step, how to modify it to get it to work with the ports paradigm.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="slow-work">4.1. How Things Work&lt;a class="anchor" href="#slow-work">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>First, this is the sequence of events which occurs when the user first types &lt;code>make&lt;/code> in the port’s directory.
Having &lt;span class="filename">bsd.port.mk&lt;/span> in another window while reading this really helps to understand it.&lt;/p>
&lt;/div></description></item><item><title>Chapter 6. Asciidoctor Primer</title><link>http://172.16.201.134:1313/en/books/fdp-primer/asciidoctor-primer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/fdp-primer/asciidoctor-primer/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>Most FDP documentation is written with AsciiDoc.
This chapter explains what that means, how to read and understand the documentation source, and the techniques used.
To get a complete reference of the Asciidoctor capabilities please consult the &lt;a href="https://docs.asciidoctor.org/home/">Asciidoctor documentation&lt;/a>.
Some of the examples used in this chapter have been taken from the &lt;a href="https://docs.asciidoctor.org/asciidoc/latest/syntax-quick-reference">AsciiDoc Syntax Quick Reference&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="asciidoctor-primer-overview">6.1. Overview&lt;a class="anchor" href="#asciidoctor-primer-overview">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>In the original days of computers, electronic text was simple.
There were a few character sets like ASCII or EBCDIC, but that was about it.
Text was text, and what you saw really was what you got.
No frills, no formatting, no intelligence.&lt;/p>
&lt;/div></description></item><item><title>Chapter 7. Flavors</title><link>http://172.16.201.134:1313/en/books/porters-handbook/flavors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/porters-handbook/flavors/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="flavors-intro">7.1. An Introduction to Flavors&lt;a class="anchor" href="#flavors-intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Flavors are a way to have multiple variations of a port.
The port is built multiple times, with variations.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>For example, a port can have a normal version with many features and quite a few dependencies, and a light &amp;#34;lite&amp;#34; version with only basic features and minimal dependencies.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Another example could be, a port can have a GTK flavor and a QT flavor, depending on which toolkit it uses.&lt;/p>
&lt;/div></description></item><item><title>Chapter 11. Manual Pages</title><link>http://172.16.201.134:1313/en/books/fdp-primer/manual-pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/fdp-primer/manual-pages/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="manual-pages-introduction">11.1. Introduction&lt;a class="anchor" href="#manual-pages-introduction">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;em>Manual pages&lt;/em>, commonly shortened to &lt;em>man pages&lt;/em>, were conceived as readily-available reminders for command syntax, device driver details, or configuration file formats.
They have become an extremely valuable quick-reference from the command line for users, system administrators, and programmers.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Although intended as reference material rather than tutorials, the EXAMPLES sections of manual pages often provide detailed use case.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Manual pages are generally shown interactively by the &lt;a href="https://man.freebsd.org/cgi/man.cgi?query=man&amp;amp;sektion=1&amp;amp;format=html">man(1)&lt;/a> command.
When the user types &lt;code>man ls&lt;/code>, a search is performed for a manual page matching &lt;code>ls&lt;/code>.
The first matching result is displayed.&lt;/p>
&lt;/div></description></item><item><title>Chapter 11. PCI Devices</title><link>http://172.16.201.134:1313/en/books/arch-handbook/pci/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/arch-handbook/pci/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>This chapter will talk about the FreeBSD mechanisms for writing a device driver for a device on a PCI bus.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="pci-probe">11.1. Probe and Attach&lt;a class="anchor" href="#pci-probe">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Information here about how the PCI bus code iterates through the unattached devices and see if a newly loaded kld will attach to any of them.&lt;/p>
&lt;/div>
&lt;div class="sect2">
&lt;h3 id="_sample_driver_source_mypci_c">11.1.1. Sample Driver Source (&lt;span class="filename">mypci.c&lt;/span>)&lt;a class="anchor" href="#_sample_driver_source_mypci_c">&lt;/a>&lt;/h3>
&lt;div class="literalblock programlisting">
&lt;div class="content">
&lt;pre>/*
 * Simple KLD to play with the PCI functions.
 *
 * Murray Stokely
 */

#include &amp;lt;sys/param.h&amp;gt;		/* defines used in kernel.h */
#include &amp;lt;sys/module.h&amp;gt;
#include &amp;lt;sys/systm.h&amp;gt;
#include &amp;lt;sys/errno.h&amp;gt;
#include &amp;lt;sys/kernel.h&amp;gt;		/* types used in module initialization */
#include &amp;lt;sys/conf.h&amp;gt;		/* cdevsw struct */
#include &amp;lt;sys/uio.h&amp;gt;		/* uio struct */
#include &amp;lt;sys/malloc.h&amp;gt;
#include &amp;lt;sys/bus.h&amp;gt;		/* structs, prototypes for pci bus stuff and DEVMETHOD macros! */

#include &amp;lt;machine/bus.h&amp;gt;
#include &amp;lt;sys/rman.h&amp;gt;
#include &amp;lt;machine/resource.h&amp;gt;

#include &amp;lt;dev/pci/pcivar.h&amp;gt;	/* For pci_get macros! */
#include &amp;lt;dev/pci/pcireg.h&amp;gt;

/* The softc holds our per-instance data. */
struct mypci_softc {
	device_t	my_dev;
	struct cdev	*my_cdev;
};

/* Function prototypes */
static d_open_t		mypci_open;
static d_close_t	mypci_close;
static d_read_t		mypci_read;
static d_write_t	mypci_write;

/* Character device entry points */

static struct cdevsw mypci_cdevsw = {
	.d_version =	D_VERSION,
	.d_open =	mypci_open,
	.d_close =	mypci_close,
	.d_read =	mypci_read,
	.d_write =	mypci_write,
	.d_name =	&amp;#34;mypci&amp;#34;,
};

/*
 * In the cdevsw routines, we find our softc by using the si_drv1 member
 * of struct cdev. We set this variable to point to our softc in our
 * attach routine when we create the /dev entry.
 */

int
mypci_open(struct cdev *dev, int oflags, int devtype, struct thread *td)
{
	struct mypci_softc *sc;

	/* Look up our softc. */
	sc = dev-&amp;gt;si_drv1;
	device_printf(sc-&amp;gt;my_dev, &amp;#34;Opened successfully.\n&amp;#34;);
	return (0);
}

int
mypci_close(struct cdev *dev, int fflag, int devtype, struct thread *td)
{
	struct mypci_softc *sc;

	/* Look up our softc. */
	sc = dev-&amp;gt;si_drv1;
	device_printf(sc-&amp;gt;my_dev, &amp;#34;Closed.\n&amp;#34;);
	return (0);
}

int
mypci_read(struct cdev *dev, struct uio *uio, int ioflag)
{
	struct mypci_softc *sc;

	/* Look up our softc. */
	sc = dev-&amp;gt;si_drv1;
	device_printf(sc-&amp;gt;my_dev, &amp;#34;Asked to read %zd bytes.\n&amp;#34;, uio-&amp;gt;uio_resid);
	return (0);
}

int
mypci_write(struct cdev *dev, struct uio *uio, int ioflag)
{
	struct mypci_softc *sc;

	/* Look up our softc. */
	sc = dev-&amp;gt;si_drv1;
	device_printf(sc-&amp;gt;my_dev, &amp;#34;Asked to write %zd bytes.\n&amp;#34;, uio-&amp;gt;uio_resid);
	return (0);
}

/* PCI Support Functions */

/*
 * Compare the device ID of this device against the IDs that this driver
 * supports. If there is a match, set the description and return success.
 */
static int
mypci_probe(device_t dev)
{

	device_printf(dev, &amp;#34;MyPCI Probe\nVendor ID : 0x%x\nDevice ID : 0x%x\n&amp;#34;,
	 pci_get_vendor(dev), pci_get_device(dev));

	if (pci_get_vendor(dev) == 0x11c1) {
		printf(&amp;#34;We&amp;#39;ve got the Winmodem, probe successful!\n&amp;#34;);
		device_set_desc(dev, &amp;#34;WinModem&amp;#34;);
		return (BUS_PROBE_DEFAULT);
	}
	return (ENXIO);
}

/* Attach function is only called if the probe is successful. */

static int
mypci_attach(device_t dev)
{
	struct mypci_softc *sc;

	printf(&amp;#34;MyPCI Attach for : deviceID : 0x%x\n&amp;#34;, pci_get_devid(dev));

	/* Look up our softc and initialize its fields. */
	sc = device_get_softc(dev);
	sc-&amp;gt;my_dev = dev;

	/*
	 * Create a /dev entry for this device. The kernel will assign us
	 * a major number automatically. We use the unit number of this
	 * device as the minor number and name the character device
	 * &amp;#34;mypci&amp;lt;unit&amp;gt;&amp;#34;.
	 */
	sc-&amp;gt;my_cdev = make_dev(&amp;amp;mypci_cdevsw, device_get_unit(dev),
	 UID_ROOT, GID_WHEEL, 0600, &amp;#34;mypci%u&amp;#34;, device_get_unit(dev));
	sc-&amp;gt;my_cdev-&amp;gt;si_drv1 = sc;
	printf(&amp;#34;Mypci device loaded.\n&amp;#34;);
	return (0);
}

/* Detach device. */

static int
mypci_detach(device_t dev)
{
	struct mypci_softc *sc;

	/* Teardown the state in our softc created in our attach routine. */
	sc = device_get_softc(dev);
	destroy_dev(sc-&amp;gt;my_cdev);
	printf(&amp;#34;Mypci detach!\n&amp;#34;);
	return (0);
}

/* Called during system shutdown after sync. */

static int
mypci_shutdown(device_t dev)
{

	printf(&amp;#34;Mypci shutdown!\n&amp;#34;);
	return (0);
}

/*
 * Device suspend routine.
 */
static int
mypci_suspend(device_t dev)
{

	printf(&amp;#34;Mypci suspend!\n&amp;#34;);
	return (0);
}

/*
 * Device resume routine.
 */
static int
mypci_resume(device_t dev)
{

	printf(&amp;#34;Mypci resume!\n&amp;#34;);
	return (0);
}

static device_method_t mypci_methods[] = {
	/* Device interface */
	DEVMETHOD(device_probe,		mypci_probe),
	DEVMETHOD(device_attach,	mypci_attach),
	DEVMETHOD(device_detach,	mypci_detach),
	DEVMETHOD(device_shutdown,	mypci_shutdown),
	DEVMETHOD(device_suspend,	mypci_suspend),
	DEVMETHOD(device_resume,	mypci_resume),

	DEVMETHOD_END
};

static devclass_t mypci_devclass;

DEFINE_CLASS_0(mypci, mypci_driver, mypci_methods, sizeof(struct mypci_softc));
DRIVER_MODULE(mypci, pci, mypci_driver, mypci_devclass, 0, 0);&lt;/pre>
&lt;/div></description></item><item><title>Chapter 13. Dos and Don'ts</title><link>http://172.16.201.134:1313/en/books/porters-handbook/porting-dads/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/porters-handbook/porting-dads/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="dads-intro">13.1. Introduction&lt;a class="anchor" href="#dads-intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Here is a list of common dos and don’ts that are encountered during the porting process.
Check the port against this list, but also check ports in the &lt;a href="https://bugs.FreeBSD.org/search/">PR database&lt;/a> that others have submitted.
Submit any comments on ports as described in &lt;a href="https://docs.freebsd.org/en/articles/contributing/#CONTRIB-GENERAL">Bug Reports and General Commentary&lt;/a>.
Checking ports in the PR database will both make it faster for us to commit them, and prove that you know what you are doing.&lt;/p>
&lt;/div></description></item><item><title>Chapter 11. x86 Assembly Language Programming</title><link>http://172.16.201.134:1313/en/books/developers-handbook/x86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/developers-handbook/x86/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>&lt;em>This chapter was written by G. Adam Stanislav &amp;lt;&lt;a href="mailto:adam@redprince.net">adam@redprince.net&lt;/a>&amp;gt;.&lt;/em>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="x86-intro">A.1. Synopsis&lt;a class="anchor" href="#x86-intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>Assembly language programming under UNIX® is highly undocumented.
It is generally assumed that no one would ever want to use it because various UNIX® systems run on different microprocessors, so everything should be written in C for portability.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>In reality, C portability is quite a myth.
Even C programs need to be modified when ported from one UNIX® to another, regardless of what processor each runs on.
Typically, such a program is full of conditional statements depending on the system it is compiled for.&lt;/p>
&lt;/div></description></item><item><title>Chapter 13. WINE</title><link>http://172.16.201.134:1313/en/books/handbook/wine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/handbook/wine/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="wine-synopsis">13.1. Synopsis&lt;a class="anchor" href="#wine-synopsis">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;a href="https://www.winehq.org/">WINE&lt;/a>, which stands for Wine Is Not an Emulator, is technically a software translation layer.
It allows installing and running software written for Windows® on FreeBSD (and other) systems.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>It operates by intercepting system calls, or requests from the software to the operating system, and translating them from Windows® calls to calls that FreeBSD understands.
It will also translate any responses as needed into what the Windows® software is expecting.
So in some ways, it &lt;em>emulates&lt;/em> a Windows® environment, in that it provides many of the resources Windows® applications are expecting.&lt;/p>
&lt;/div></description></item><item><title>Chapter 17. Using USES Macros</title><link>http://172.16.201.134:1313/en/books/porters-handbook/uses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/porters-handbook/uses/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="uses-intro">17.1. An Introduction to &lt;code>USES&lt;/code>&lt;a class="anchor" href="#uses-intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>&lt;code>USES&lt;/code> macros make it easy to declare requirements and settings for a port.
They can add dependencies, change building behavior, add metadata to packages, and so on, all by selecting simple, preset values.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Each section in this chapter describes a possible value for &lt;code>USES&lt;/code>, along with its possible arguments.
Arguments are appended to the value after a colon (&lt;code>:&lt;/code>).
Multiple arguments are separated by commas (&lt;code>,&lt;/code>).&lt;/p>
&lt;/div></description></item><item><title>Chapter 19. Security Event Auditing</title><link>http://172.16.201.134:1313/en/books/handbook/audit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/handbook/audit/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="audit-synopsis">19.1. Synopsis&lt;a class="anchor" href="#audit-synopsis">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>The FreeBSD operating system includes support for security event auditing.
Event auditing supports reliable, fine-grained, and configurable logging of a variety of security-relevant system events, including logins, configuration changes, and file and network access.
These log records can be invaluable for live system monitoring, intrusion detection, and postmortem analysis.
FreeBSD implements Sun™&amp;#39;s published Basic Security Module (BSM) Application Programming Interface (API) and file format, and is interoperable with the Solaris™ and Mac OS® X audit implementations.&lt;/p>
&lt;/div></description></item><item><title>Committer's Guide</title><link>http://172.16.201.134:1313/en/articles/committers-guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/committers-guide/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This document provides information for the FreeBSD committer community.
All new committers should read this document before they start, and existing committers are strongly encouraged to review it from time to time.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Almost all FreeBSD developers have commit rights to one or more repositories.
However, a few developers do not, and some of the information here applies to them as well.
(For instance, some people only have rights to work with the Problem Report database.)
Please see &lt;a href="../committers-guide/#non-committers">Issues Specific to Developers Who Are Not Committers&lt;/a> for more information.&lt;/p>
&lt;/div></description></item><item><title>Chapter 27. DTrace</title><link>http://172.16.201.134:1313/en/books/handbook/dtrace/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/handbook/dtrace/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="dtrace-synopsis">27.1. Synopsis&lt;a class="anchor" href="#dtrace-synopsis">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>DTrace, also known as Dynamic Tracing, was developed by Sun™ as a tool for locating performance bottlenecks in production and pre-production systems.
In addition to diagnosing performance problems, DTrace can be used to help investigate and debug unexpected behavior in both the FreeBSD kernel and in userland programs.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>DTrace is a remarkable profiling tool, with an impressive array of features for diagnosing system issues.
It may also be used to run pre-written scripts to take advantage of its capabilities.
Users can author their own utilities using the DTrace D Language, allowing them to customize their profiling based on specific needs.&lt;/p>
&lt;/div></description></item><item><title>CUPS on FreeBSD</title><link>http://172.16.201.134:1313/en/articles/cups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/cups/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>An article about configuring CUPS on FreeBSD.&lt;/p>
&lt;/div>
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="printing-cups">1. An Introduction to the Common Unix Printing System (CUPS)&lt;a class="anchor" href="#printing-cups">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>CUPS, the Common UNIX Printing System, provides a portable printing layer for UNIX®-based operating systems.
It has been developed by Easy Software Products to promote a standard printing solution for all UNIX® vendors and users.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>CUPS uses the Internet Printing Protocol (IPP) as the basis for managing print jobs and queues.
The Line Printer Daemon (LPD), Server Message Block (SMB), and AppSocket (aka JetDirect) protocols are also supported with reduced functionality.
CUPS adds network printer browsing and PostScript Printer Description (PPD) based printing options to support real-world printing under UNIX®.
As a result, CUPS is ideally-suited for sharing and accessing printers in mixed environments of FreeBSD, Linux®, Mac OS® X, or Windows®.&lt;/p>
&lt;/div></description></item><item><title>Fonts and FreeBSD</title><link>http://172.16.201.134:1313/en/articles/fonts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/fonts/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This document contains a description of the various font files that may be used with FreeBSD and the syscons driver, X11, Ghostscript and Groff.
Cookbook examples are provided for switching the syscons display to 80x60 mode, and for using type 1 fonts with the above application programs.&lt;/p>
&lt;/div>
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="intro">1. Introduction&lt;a class="anchor" href="#intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>There are many sources of fonts available, and one might ask how they might be used with FreeBSD.
The answer can be found by carefully searching the documentation for the component that one would like to use.
This is very time consuming, so this tutorial is an attempt to provide a shortcut for others who might be interested.&lt;/p>
&lt;/div></description></item><item><title>FreeBSD Quickstart Guide for Linux® Users</title><link>http://172.16.201.134:1313/en/articles/linux-users/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/linux-users/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This document is intended to quickly familiarize intermediate to advanced Linux® users with the basics of FreeBSD.&lt;/p>
&lt;/div>
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="intro">1. Introduction&lt;a class="anchor" href="#intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>This document highlights some of the technical differences between FreeBSD and Linux® so that intermediate to advanced Linux® users can quickly familiarize themselves with the basics of FreeBSD.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This document assumes that FreeBSD is already installed.
Refer to the &lt;a href="https://docs.freebsd.org/en/books/handbook/#bsdinstall">Installing FreeBSD&lt;/a> chapter of the FreeBSD Handbook for help with the installation process.&lt;/p>
&lt;/div></description></item><item><title>Introduction to NanoBSD</title><link>http://172.16.201.134:1313/en/articles/nanobsd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/nanobsd/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This document provides information about the NanoBSD tools, which can be used to create FreeBSD system images for embedded applications, suitable for use on a USB key, memory card or other mass storage media.&lt;/p>
&lt;/div>
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="intro">1. Introduction to NanoBSD&lt;a class="anchor" href="#intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>NanoBSD is a tool developed by Poul-Henning Kamp &amp;lt;&lt;a href="mailto:phk@FreeBSD.org">phk@FreeBSD.org&lt;/a>&amp;gt; and now maintained by Warner Losh &amp;lt;&lt;a href="mailto:imp@FreeBSD.org">imp@FreeBSD.org&lt;/a>&amp;gt;.
It creates a FreeBSD system image for embedded applications, suitable for use on a USB key, memory card or other mass storage media.&lt;/p>
&lt;/div></description></item><item><title>LDAP Authentication</title><link>http://172.16.201.134:1313/en/articles/ldap-auth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/ldap-auth/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This document is intended as a guide for the configuration of an LDAP server (principally an OpenLDAP server) for authentication on FreeBSD.
This is useful for situations where many servers need the same user accounts, for example as a replacement for NIS.&lt;/p>
&lt;/div>
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="preface">1. Preface&lt;a class="anchor" href="#preface">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>This document is intended to give the reader enough of an understanding of LDAP to configure an LDAP server.
This document will attempt to provide an explanation of &lt;a class="package" href="https://cgit.freebsd.org/ports/tree/net/nss_ldap/">net/nss_ldap&lt;/a> and &lt;a class="package" href="https://cgit.freebsd.org/ports/tree/security/pam_ldap/">security/pam_ldap&lt;/a> for use with client machines services for use with the LDAP server.&lt;/p>
&lt;/div></description></item><item><title>Practical rc.d scripting in BSD</title><link>http://172.16.201.134:1313/en/articles/rc-scripting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/rc-scripting/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>Beginners may find it difficult to relate the facts from the formal documentation on the BSD &lt;span class="filename">rc.d&lt;/span> framework with the practical tasks of &lt;span class="filename">rc.d&lt;/span> scripting.
In this article, we consider a few typical cases of increasing complexity, show &lt;span class="filename">rc.d&lt;/span> features suited for each case, and discuss how they work.
Such an examination should provide reference points for further study of the design and efficient application of &lt;span class="filename">rc.d&lt;/span>.&lt;/p>
&lt;/div>
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="rcng-intro">1. Introduction&lt;a class="anchor" href="#rcng-intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>The historical BSD had a monolithic startup script, &lt;span class="filename">/etc/rc&lt;/span>.
It was invoked by &lt;a href="https://man.freebsd.org/cgi/man.cgi?query=init&amp;amp;sektion=8&amp;amp;format=html">init(8)&lt;/a> at system boot time and performed all userland tasks required for multi-user operation: checking and mounting file systems, setting up the network, starting daemons, and so on.
The precise list of tasks was not the same in every system; admins needed to customize it.
With few exceptions, &lt;span class="filename">/etc/rc&lt;/span> had to be modified, and true hackers liked it.&lt;/p>
&lt;/div></description></item></channel></rss>