<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kernel on FreeBSD Documentation Portal</title><link>http://172.16.201.134:1313/en/tags/kernel/</link><description>Recent content in Kernel on FreeBSD Documentation Portal</description><generator>Hugo</generator><language>en</language><copyright>BSD 2-clause 'Simplified' License</copyright><atom:link href="http://172.16.201.134:1313/en/tags/kernel/index.xml" rel="self" type="application/rss+xml"/><item><title>Chapter 1. Bootstrapping and Kernel Initialization</title><link>http://172.16.201.134:1313/en/books/arch-handbook/boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/arch-handbook/boot/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="boot-synopsis">1.1. Synopsis&lt;a class="anchor" href="#boot-synopsis">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>This chapter is an overview of the boot and system initialization processes, starting from the BIOS (firmware) POST, to the first user process creation.
Since the initial steps of system startup are very architecture dependent, the IA-32 architecture is used as an example.
But the AMD64 and ARM64 architectures are much more important and compelling examples and should be explained in the near future according to the topic of this document.&lt;/p>
&lt;/div></description></item><item><title>Chapter 4. The Jail Subsystem</title><link>http://172.16.201.134:1313/en/books/arch-handbook/jail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/arch-handbook/jail/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>On most UNIX® systems, &lt;code>root&lt;/code> has omnipotent power. This promotes insecurity. If an attacker gained &lt;code>root&lt;/code> on a system, he would have every function at his fingertips. In FreeBSD there are sysctls which dilute the power of &lt;code>root&lt;/code>, in order to minimize the damage caused by an attacker. Specifically, one of these functions is called &lt;code>secure levels&lt;/code>. Similarly, another function which is present from FreeBSD 4.0 and onward, is a utility called &lt;a href="https://man.freebsd.org/cgi/man.cgi?query=jail&amp;amp;sektion=8&amp;amp;format=html">jail(8)&lt;/a>. Jail chroots an environment and sets certain restrictions on processes which are forked within the jail. For example, a jailed process cannot affect processes outside the jail, utilize certain system calls, or inflict any damage on the host environment.&lt;/p>
&lt;/div></description></item><item><title>Chapter 9. Building and Installing a FreeBSD Kernel</title><link>http://172.16.201.134:1313/en/books/developers-handbook/kernelbuild/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/developers-handbook/kernelbuild/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;div class="paragraph">
&lt;p>Being a kernel developer requires understanding of the kernel build process.
To debug the FreeBSD kernel it is required to be able to build one.
There are two known ways to do so:&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>The supported procedure to build and install a kernel is documented in the &lt;a href="https://docs.freebsd.org/en/books/handbook/kernelconfig/#kernelconfig-building">Building and Installing a Custom Kernel&lt;/a> chapter of the FreeBSD Handbook.&lt;/p>
&lt;/div>
&lt;div class="admonitionblock note">
&lt;table>
&lt;tbody>&lt;tr>
&lt;td class="icon">
&lt;i class="fa icon-note" title="Note">&lt;/i>
&lt;/td>
&lt;td class="content">
&lt;div class="paragraph">
&lt;p>It is supposed that the reader of this chapter is familiar with the information described in the &lt;a href="https://docs.freebsd.org/en/books/handbook/kernelconfig/#kernelconfig-building">Building and Installing a Custom Kernel&lt;/a> chapter of the FreeBSD Handbook.
If this is not the case, please read through the above mentioned chapter to understand how the build process works.&lt;/p>
&lt;/div></description></item><item><title>Chapter 10. Configuring the FreeBSD Kernel</title><link>http://172.16.201.134:1313/en/books/handbook/kernelconfig/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/books/handbook/kernelconfig/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="kernelconfig-synopsis">10.1. Synopsis&lt;a class="anchor" href="#kernelconfig-synopsis">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="paragraph">
&lt;p>The kernel is the core of the FreeBSD operating system.
It is responsible for managing memory, enforcing security controls, networking, disk access, and much more.
While much of FreeBSD is dynamically configurable, some users may wish to configure and compile a custom kernel.&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>After reading this chapter, you will know:&lt;/p>
&lt;/div>
&lt;div class="ulist">
&lt;ul>
&lt;li>
&lt;p>When to build a custom kernel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How to take a hardware inventory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How to customize a kernel configuration file.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How to use the kernel configuration file to create and build a new kernel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How to install the new kernel.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>How to troubleshoot if things go wrong.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/div></description></item><item><title>Linux® emulation in FreeBSD</title><link>http://172.16.201.134:1313/en/articles/linux-emulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/linux-emulation/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This masters thesis deals with updating the Linux® emulation layer (the so called &lt;em>Linuxulator&lt;/em>).
The task was to update the layer to match the functionality of Linux® 2.6.
As a reference implementation, the Linux® 2.6.16 kernel was chosen.
The concept is loosely based on the NetBSD implementation.
Most of the work was done in the summer of 2006 as a part of the Google Summer of Code students program.
The focus was on bringing the &lt;em>NPTL&lt;/em> (new POSIX® thread library) support into the emulation layer, including &lt;em>TLS&lt;/em> (thread local storage), &lt;em>futexes&lt;/em> (fast user space mutexes), &lt;em>PID mangling&lt;/em>, and some other minor things.
Many small problems were identified and fixed in the process.
My work was integrated into the main FreeBSD source repository and will be shipped in the upcoming 7.0R release.
We, the emulation development team, are working on making the Linux® 2.6 emulation the default emulation layer in FreeBSD.&lt;/p>
&lt;/div></description></item><item><title>Writing a GEOM Class</title><link>http://172.16.201.134:1313/en/articles/geom-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://172.16.201.134:1313/en/articles/geom-class/</guid><description>&lt;div id="preamble">
&lt;div class="sectionbody">
&lt;div class="paragraph abstract-title">
&lt;p>Abstract&lt;/p>
&lt;/div>
&lt;div class="paragraph">
&lt;p>This text documents some starting points in developing GEOM classes, and kernel modules in general.
It is assumed that the reader is familiar with C userland programming.&lt;/p>
&lt;/div>
&lt;hr/>

&lt;/div>
&lt;/div>
&lt;div class="sect1">
&lt;h2 id="intro">1. Introduction&lt;a class="anchor" href="#intro">&lt;/a>&lt;/h2>
&lt;div class="sectionbody">
&lt;div class="sect2">
&lt;h3 id="intro-docs">1.1. Documentation&lt;a class="anchor" href="#intro-docs">&lt;/a>&lt;/h3>
&lt;div class="paragraph">
&lt;p>Documentation on kernel programming is scarce - it is one of few areas where there is nearly nothing in the way of friendly tutorials, and the phrase &amp;#34;use the source!&amp;#34; really holds true.
However, there are some bits and pieces (some of them seriously outdated) floating around that should be studied before beginning to code:&lt;/p>
&lt;/div></description></item></channel></rss>